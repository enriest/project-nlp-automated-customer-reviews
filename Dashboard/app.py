#!/usr/bin/env python3
"""
Simple Streamlit dashboard to browse category and rating summaries generated by
scripts/summarize_by_category_and_rating.py. It reads JSON files in outputs/summaries.
"""
import json
from pathlib import Path
import streamlit as st
import pandas as pd

SUMMARIES_DIR = Path(__file__).resolve().parents[1] / "outputs" / "summaries"

st.set_page_config(page_title="Review Summaries", page_icon="üìù", layout="wide")
st.title("üìù Review Summaries by Category and Rating")

if not SUMMARIES_DIR.exists():
    st.error(f"Summaries directory not found: {SUMMARIES_DIR}")
    st.stop()

index_path = SUMMARIES_DIR / "index.json"
if not index_path.exists():
    st.warning("No index.json found. Please run the summarization script first.")
    st.stop()

with open(index_path, "r", encoding="utf-8") as f:
    idx = json.load(f)

cats = idx.get("categories", [])
if not cats:
    st.warning("No categories in index.json")
    st.stop()

# Sidebar filters
st.sidebar.header("Filters")
query = st.sidebar.text_input("Search categories", "")
sort_by = st.sidebar.selectbox("Sort by", ["total_reviews", "category"])

df_idx = pd.DataFrame(cats)
if query:
    df_idx = df_idx[df_idx["category"].str.contains(query, case=False)]

if sort_by == "category":
    df_idx = df_idx.sort_values("category")
else:
    df_idx = df_idx.sort_values("total_reviews", ascending=False)

st.sidebar.write(f"Found {len(df_idx)} categories")

# Category select
cat_name = st.selectbox("Select a category", df_idx["category"].tolist())
cat_row = df_idx[df_idx["category"] == cat_name].iloc[0]

# Load category file
with open(cat_row["file"], "r", encoding="utf-8") as f:
    cat_data = json.load(f)

st.subheader(f"Category: {cat_name} ({cat_data['total_reviews']} total reviews)")

ratings = cat_data.get("ratings", {})

# Display per rating summary
cols = st.columns(5)
for i, rating in enumerate(["1", "2", "3", "4", "5"]):
    r = ratings.get(rating, {})
    with cols[i]:
        st.metric(label=f"‚≠ê {rating}-star reviews", value=r.get("count", 0))

st.markdown("---")

for rating in ["1", "2", "3", "4", "5"]:
    r = ratings.get(rating, {})
    with st.expander(f"‚≠ê {rating}-star Summary (sampled {r.get('sampled', 0)} of {r.get('count', 0)})", expanded=(rating in ["1", "5"])):
        st.write(r.get("summary", "(no summary)"))


st.markdown("---")
st.subheader("Run Generative Summarizer")
with st.expander("Generate or regenerate summaries from raw data (runs the summarizer script)"):
    st.write("You can run the summarizer to (re)create `outputs/summaries/*.json`. This will execute the CLI script in the project.")

    col1, col2, col3 = st.columns(3)
    with col1:
        input_path = st.text_input("Input CSV path (or folder)", value="archive/1429_1.csv")
    with col2:
        top_n = st.number_input("Top N categories", min_value=1, max_value=100, value=5)
    with col3:
        min_reviews = st.number_input("Min reviews per category", min_value=1, max_value=1000, value=50)

    offline = st.checkbox("Use offline cached summarization model (recommended)", value=True)
    model_path = st.text_input("Model path or HF id", value="offline_models/summarizer/sshleifer-distilbart-cnn-12-6")
    max_per_rating = st.number_input("Max reviews per rating (cap)", min_value=10, max_value=2000, value=200)

    run_btn = st.button("Run summarizer")
    if run_btn:
        import subprocess, shlex, sys
        st.info("Starting summarizer ‚Äî this may take a while depending on model and data size.")
        cmd = f"python scripts/summarize_by_category_and_rating.py --input {shlex.quote(input_path)} --top-n {top_n} --min-reviews {min_reviews} --max-reviews-per-rating {max_per_rating} --model-name {shlex.quote(model_path)}"
        if offline:
            cmd += " --offline --cache-dir " + shlex.quote(model_path)

        st.code(cmd, language="bash")

        with st.spinner("Running summarizer..."):
            try:
                # Use shell=False for safety
                proc = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
                st.success("Summarizer finished successfully")
                st.text_area("Summarizer stdout", proc.stdout, height=200)
                if proc.stderr:
                    st.text_area("Summarizer stderr", proc.stderr, height=200)
                st.experimental_rerun()
            except subprocess.CalledProcessError as e:
                st.error(f"Summarizer failed: returncode={e.returncode}")
                st.text_area("Summarizer stdout", e.stdout or "", height=120)
                st.text_area("Summarizer stderr", e.stderr or "", height=200)
